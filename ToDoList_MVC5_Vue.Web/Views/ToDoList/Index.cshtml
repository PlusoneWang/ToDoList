@{
    Layout = "~/Views/Shared/_ToDoList.cshtml";
    ViewBag.Title = "我的待辦清單";
}

<div class="container-fluid" id="app" style="height: 100vh">
    <div class="row">

        <!-- 左側邊攔 -->
        <div id="sidebar" class="p-0 flex-column"
             :class="{'col-2':!collapsed,'collapsed':collapsed }">

            <!-- menu -->
            <nav id="sidebar-head" class="navbar navbar-dark bg-dark p-0" @@click="toggleCollapsed">
                <a class="navbar-brand col-12 mr-0" href="#"><i data-feather="menu"></i></a>
            </nav>

            <!-- user control -->
            <div id="sidebar-usercontrol" class="d-flex align-items-center bg-light  border-right">
                <ul class="nav w-100">
                    <li class="nav-item w-100 dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i data-feather="user"></i><span v-if="!collapsed">@((ViewBag.CurrentUser as AppUser).Id)</span>
                        </a>
                        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                            <a class="dropdown-item" href="@Url.Action("Index","Home")" target="_blank">首頁</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="@Url.Action("Logout","Account")">登出</a>
                        </div>
                    </li>
                </ul>
            </div>

            <!-- lists -->
            <div id="sidebar-lists" class="bg-light  border-right">
                <!-- more-->
                <ul class="nav flex-column" v-if="collapsed">
                    <li id="lists-more" class="nav-item" @@click="toggleCollapsed">
                        <a class="nav-link" href="#"><i data-feather="more-vertical"></i></a>
                    </li>
                </ul>

                <!-- lists -->
                <ul class="nav flex-column" v-if="!collapsed">
                    <li class="nav-item"
                        v-for="list in toDoLists"
                        :key="list.Id">
                        <a class="nav-link" href="#"><i data-feather="list"></i><span>{{list.Name}}</span></a>
                    </li>
                </ul>
            </div>

            <!-- action -->
            <nav id="sidebar-action" class="navbar navbar-light bg-light p-0  border-right">
                <a class="navbar-brand col-12 mr-0" href="#"
                   @@click="createList"><i data-feather="plus"></i><span v-if="!collapsed">新增待辦清單</span></a>
            </nav>
        </div>

        <!-- 主操作區 -->
        <div id="main" class="p-0">
            <!-- 頂部navbar -->
            <nav id="main-navbar" class="navbar navbar-expand navbar-light bg-light border-bottom">
                <!-- TODO more button -->
                <div id="searchbox">
                    <input type="text" class="w-100" placeholder="Search" aria-label="Search"
                           v-model="searchText"
                           v-focus="isOnSearch"
                           @@focus="setOnSearch">
                </div>
                <div id="searchbox-state">
                    <span :class="{'d-none':isOnSearch}"
                          @@click="setOnSearch"><i data-feather="search"></i></span>
                    <span :class="{'d-none':!isOnSearch}"
                          @@click="setClearSearch"><i data-feather="x"></i></span>
                </div>
            </nav>

            <!-- 清單項目顯示欄 -->
            <div class="container">
            </div>
        </div>

        <!-- TODO 右側Detail欄 -->
        <!--<div id="detail " class="p-0"></div>-->
    </div>
</div>

@section scripts
{
    <script src="~/Scripts/feather.js"></script>
    <script>
        feather.replace();

        let app = new Vue({
            el: "#app",

            data: {
                collapsed: false, // 控制左側欄收合
                isOnSearch: false, // 控制搜尋欄及按鈕的顯示狀態
                searchText: "", // 搜尋字串
                toDoLists: [],
            },

            // 自定義指令
            directives: {
                focus: {
                    update(el, { value }) {
                        if (value) {
                            el.focus();
                        }
                    }
                }
            },

            created() {
                axios.get(Router.action("ToDoList", "GetLists"))
                    .then(function (response) {
                        console.log(response);
                        console.log(resolveReferences(response.data));
                        // TODO set list to this.toDoLists
                    }.bind(this)).catch(function (error) {
                        if (error.response) {
                            console.log(error.response.data);
                            console.log(error.response.status);
                            console.log(error.response.headers);
                        } else if (error.request) {
                            console.log(error.request);
                        } else {
                            console.log('Error', error.message);
                        }
                        console.log(error.config);
                    }.bind(this));
            },

            methods: {
                // 切換左側欄收合
                toggleCollapsed() {
                    this.collapsed = !this.collapsed;
                },

                // 設定為搜尋
                setOnSearch() {
                    this.isOnSearch = true;
                },

                // 清除搜尋
                setClearSearch() {
                    this.isOnSearch = false;
                    this.searchText = "";
                },

                // 新增待辦清單
                createList() {
                    swal({
                        title: '新增待辦清單',
                        input: 'text',
                        inputAttributes: {
                            autocapitalize: 'off',
                            maxlength: "255",
                        },
                        inputPlaceholder: "清單名稱",
                        showCancelButton: true,
                        cancelButtonText: "取消",
                        confirmButtonText: '儲存',
                        showLoaderOnConfirm: true,
                        preConfirm: (listName) => {
                            return axios.post(Router.action("ToDoList", "CreateList"), { listName })
                                .then(function (response) {
                                    const data = response.data;
                                    console.log(data);
                                    // TODO update vue.data with data
                                })
                                .catch(function (error) {
                                    if (error.response) {
                                        console.log(error.response.data);
                                        console.log(error.response.status);
                                        console.log(error.response.headers);
                                    } else if (error.request) {
                                        console.log(error.request);
                                    } else {
                                        console.log('Error', error.message);
                                    }
                                    console.log(error.config);
                                });
                        },
                        allowOutsideClick: () => !swal.isLoading()
                    });
                }
            }
        });
    </script>
}
